name: Release
description: Create GitHub release

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Read version from package.json
        id: read_version
        run: |
          current_tag=$(jq -r '.version' package.json)
          echo "current_tag=$current_tag" >> $GITHUB_ENV

      - name: Get previous tag
        id: get_previous_tag
        run: |
          previous_tag=$(git log --tags --simplify-by-decoration --pretty="format:%D" | grep -o "tag: [^,]*" | head -n 1 | sed 's/tag: //')
          echo "previous_tag=$previous_tag" >> $GITHUB_ENV

      - name: Create new tag
        id: create_new_tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a ${{ env.current_tag }} -m "Release ${{ env.current_tag }}"
          git push origin ${{ env.current_tag }}

      - name: Generate release notes
        id: generate_release_notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { owner, repo } = context.repo;
            const previousTag = process.env.previous_tag;
            const currentTag = process.env.current_tag;

            let commitList;
            if (previousTag) {
              const commits = await github.rest.repos.compareCommits({
                owner,
                repo,
                base: previousTag,
                head: currentTag,
              });
              // order from newest to oldest
              commitList = commits.data.commits.reverse();
            } else {
              const commits = await github.rest.repos.listCommits({
                owner,
                repo,
              });
              commitList = commits.data;
            }

            const prList = [];
            for (const commit of commitList) {
              if (!commit.commit.message.startsWith('chore(main): release')) {
                prList.push(`- ${commit.commit.message} ([${commit.sha.substring(0, 7)}](${commit.html_url}))`);
              }
            }

            return prList.length > 0 ? prList.join('\n')  : 'No pull requests found for this release';

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.current_tag }}
          name: ${{ env.current_tag }}
          body: ${{ steps.generate_release_notes.outputs.result }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
